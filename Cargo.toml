# 工作空间（workspaces）是一系列共享同样的 Cargo.lock 和输出目录的包
# 如果你选择向 crates.io 发布工作空间中的 crate，每一个工作空间中的 crate 需要单独发布
# cargo run / cargo test 可以通过 -p 来运行特定的 crate
# 工作空间只在根目录有一个 Cargo.lock，这确保了所有的 crate 都使用完全相同版本的依赖
# 在顶级目录只有一个 target 目录，可以避免其他 crate 重复构建

# 一个 section
[workspace]
resolver = "3"
members = ["trpl/*"]

[workspace.package]
# 见 https://doc.rust-lang.org/edition-guide/introduction.html
edition = "2024"
rust-version = "1.88"
license = "MIT OR Apache-2.0"

[workspace.dependencies]
# 是 ^0.8.5 的简写，它表示任何至少是 0.8.5 但小于 0.9.0 的版本
# 如果是 2.x.x，则表示至少是 2.x.x 但不超过 3.0.0 的版本
# cargo add 添加 crate
# cargo doc 构建文档（包括依赖）
# cargo update 忽略 Cargo.lock，并计算出所有符合 Cargo.toml 声明的最新版本并写入 Cargo.lock

# https://github.com/rust-random/rand
rand = { version = "0.9.2", default-features = false, features = [
  "std",
  "thread_rng",
] }
# https://github.com/rust-lang/book
trpl = "0.2.0"
